<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>dataflow</groupId>
  <artifactId>dataflow</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>dataflow</name>
  <url>http://maven.apache.org</url>

  <properties>    
    <avro-version>1.7.3</avro-version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>    
    <!-- Dataflow SDK-->
    <dependency>
      <groupId>com.google.cloud.dataflow</groupId>
      <artifactId>google-cloud-dataflow-java-sdk-all</artifactId>
      <version>[0.3.141216,)</version>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
      <version>${avro-version}</version>
    </dependency>
    <!-- Docker Client.-->
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>docker-client</artifactId>
      <version>[2.2.1,)</version>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.1</version>
          <configuration>
            <source>1.7</source>
            <target>1.7</target>
            <compilerArgument>-Xlint:all</compilerArgument>
            <showWarnings>true</showWarnings>
            <showDeprecation>true</showDeprecation>
          </configuration>
       </plugin>
      <!-- A plugin for building bundled jars. 
           This doesn't appear to work because the spotify client requires
           jars which need to be signed. If you set inline false you can build
           a jar which contains the other jars. If you unpack that jar and
           it to the classpath it seems to work.
           
           If you manually modify the bundled jar to remove the META-INF/BCKEY.*
           then repackage it, you will get a working jar.
        -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.4.0</version>
        <extensions>true</extensions>
        <configuration>          
          <instructions>
           <!-- Embed all dependencies -->
           <Embed-Transitive>true</Embed-Transitive> 
           <Embed-Dependency>*;scope=compile|runtime;inline=false</Embed-Dependency>
         </instructions>
       </configuration>
     </plugin>
     <!--use the maven plugin for avro to generate the sources from the protocols -->
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <version>${avro-version}</version>
        <executions>
          <execution>
            <id>schemas</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>idl-protocol</goal>
            </goals>
            <configuration>
              <includes>
                <include>*.avdl</include>
              </includes>
              <sourceDirectory>${project.basedir}/share/schemas/dataflow/</sourceDirectory>
              <outputDirectory>${project.build.directory}/generated-sources/java</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
   </plugins>
  </build>
</project>
